<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.2.11 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC7540 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7540.xml">
<!ENTITY RFC8288 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.8288.xml">
<!ENTITY I-D.ietf-httpbis-header-structure SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.ietf-httpbis-header-structure.xml">
<!ENTITY W3C.CR-preload-20171026 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml4/reference.W3C.CR-preload-20171026.xml">
<!ENTITY RFC4287 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.4287.xml">
]>


<rfc docName="draft-pot-prefer-push-01" category="std">

  <front>
    <title>HTTP-client suggested Push Preference</title>

    <author initials="E." surname="Pot" fullname="Evert Pot">
      <organization></organization>
      <address>
        <email>me@evertpot.com</email>
        <uri>https://evertpot.com/</uri>
      </address>
    </author>

    <date year="2018" month="December" day="02"/>

    
    
    

    <abstract>


<t>A header for enabling HTTP clients to indicate that a Push for specific
related resources might be desired.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>HTTP/2 <xref target="RFC7540"/> allows a server to push request and response pairs to
HTTP clients. This can save round-trips between server and client and
reduces the total time required for a client to retrieve all requested
resources.</t>

<t>This mechanism is completely controlled by the server, and it is up to
implementors of services to anticipate what resources a client might need
next.</t>

<t>This specification defines a new HTTP header that allows a client to inform a
server of resources they will require next based on a link relation type
<xref target="RFC8288"/>.</t>

</section>
<section anchor="rationale" title="Rationale">

<t>Many HTTP-based services provide some mechanism to embed the HTTP response
bodies of resources into other HTTP resource. A common example of this is when
a resource is structured as a “collection of resources”. Examples of this
include:</t>

<t><list style="symbols">
  <t>The Atom Syndication Format <xref target="RFC4287"/> that encodes <spanx style="verb">ATOM:entry</spanx> XML
elements for each subordinate.</t>
  <t>The <xref target="HAL"></xref> format, which provides an <spanx style="verb">_embedded</spanx> element to embedding bodies
of resources in other resources.</t>
  <t>The <xref target="JSON-API"></xref> format, which provides a <spanx style="verb">included</spanx> property to embed
resources.</t>
</list></t>

<t>Embedding resource responses in other resources has two major peformance
advantages:</t>

<t><list style="numbers">
  <t>It reduces the number of roundtrips. A client can make a single HTTP request
and get many responses.</t>
  <t>Generating a related set of resources can often be implemented on a server
to be less time consuming that generating each response individually.</t>
</list></t>

<t>These mechanism also poses an issue. HTTP clients and intermediaries such as
proxies and caches are not aware of these embedded resources.</t>

<t>One example where this might fail is if a client recieves a resource, embedded
in another resource, a cache might not be aware of this resource and serve a
stale, older version when the resource is requesed directly.</t>

<t>To keep the performance advantage of being able to generate a related set of
HTTP together and maintain HTTP request, The HTTP/2 Push mechanism could be an
alternative to embedding.</t>

<t>HTTP/2 Push allows the server to initiate a request and response pair and send
them to the client early if the server thinks it will need them. Another
advantage of HTTP/2 push over embedding it that it allows resources of mixed
mediatypes to be pushed.</t>

<t>Server can however not always anticipate which resources a client might want
in the future. To avoid guessing, this specification introduces a <spanx style="verb">Prefer-Push</spanx>
header that allows a client to inform a server which resources they will
need next.</t>

<t>In many REST apis, sub-ordiniate or embedded resources are identified by their
link relation. By using the link relation, it will be possible for a client
to indicate to a server which links they intent to follow, allowing a server
to only push the resources that the client knows it will need.</t>

</section>
<section anchor="the-header-format" title="The header format">

<t>This format should uses the “List” format from the Structured Headers format
<xref target="I-D.ietf-httpbis-header-structure"/>.</t>

<figure><artwork><![CDATA[
GET /articles HTTP/1.1
Prefer-Push: item, author, "https://example.org/custom-rel"
]]></artwork></figure>

</section>
<section anchor="handling-a-prefer-push-request" title="Handling a Prefer-Push request">

<t>When a server receives the <spanx style="verb">Prefer-Push</spanx> header, it can choose to push the
related resources. It’s up to the discretion of the implementor to decide
which resources to push. A server is also free to ignore push-requests.</t>

<t><xref target="RFC8288"/> defines Web Links as an abstract concept that can be specified
in a variety of ways. It defines the HTTP “Link” header as a specific
serialization. Like <xref target="RFC8288"/>, this specification is not dependent on the
serialization of the Web Link.</t>

</section>
<section anchor="using-with-preload-relationship-types" title="Using with “preload” relationship types">

<t><xref target="W3C.CR-preload-20171026"/> defines a <spanx style="verb">preload</spanx> relationship type. This
relationship type can be used by an origin to inform a client or intermediate
to start fetching a resource, or a proxy to initiate a HTTP/2 push.</t>

<t>A distinct difference between <spanx style="verb">preload</spanx> and <spanx style="verb">Prefer-Push</spanx> is that <spanx style="verb">preload</spanx>
can be used by origin servers to inform clients and intermediates to fetch
and potentially push resources optimistically, but fundamentally <spanx style="verb">Prefer-Push</spanx>
is a completely client-driven mechanism.</t>

<t>These features can co-exist, but a wide adoption of client-driven suggestions
for pushes might eventually make <spanx style="verb">preload</spanx> unnecceary as in most cases clients
will have a better knowledge of the resources they need.</t>

</section>
<section anchor="security-considerations" title="Security considerations">

<t>The Prefer-Push mechanism can potentially result in a large number of
resources being pushed. This can result in a Denial-of-Service attack.</t>

<t>A server must set reasonable restrictions around the amount of pushes it
sends. In the case of N-Depth pushes, servers SHOULD also set restrictions
around the depth it supports.</t>

</section>
<section anchor="iana-considerations" title="IANA considerations">

<t>This document defines the <spanx style="verb">Prefer-Push</spanx> HTTP request fields and registers
them in the Permanent Message Header Fields registry.</t>

<section anchor="prefer-push" title="Prefer-Push">
<t><list style="symbols">
  <t>Header field name: Prefer-Push</t>
  <t>Applicable protocol: HTTP</t>
  <t>Status: standard</t>
  <t>Author/Change controller: IETF</t>
  <t>Specification document(s): <xref target="prefer-push"/> of this document</t>
  <t>Related information: for Client Hints</t>
</list></t>

</section>
</section>
<section anchor="acknowledgements" title="Acknowledgements">

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC7540;
&RFC8288;
&I-D.ietf-httpbis-header-structure;
&W3C.CR-preload-20171026;


    </references>

    <references title='Informative References'>

&RFC4287;
<reference anchor="HAL" target="https://tools.ietf.org/html/draft-kelly-json-hal-00">
  <front>
    <title>JSON Hypertext Application Language</title>
    <author initials="M." surname="Kelly" fullname="Mike Kelly">
      <organization></organization>
    </author>
    <date year="2012" month="June" day="07"/>
  </front>
</reference>
<reference anchor="JSON-API" target="https://jsonapi.org/format/">
  <front>
    <title>JSON:API</title>
    <author >
      <organization></organization>
    </author>
    <date year="n.d."/>
  </front>
</reference>


    </references>


<section anchor="example" title="Example">

<t>A server serves a document with a JSON-based media-type. The following example
document might represent a list of articles:</t>

<figure><artwork><![CDATA[
HTTP/1.1 200 OK
Content-Type: application/vnd.example.links+json

{
   "links": [
      { "rel": "item", "href": "/article/1" },
      { "rel": "item", "href": "/article/2" },
      { "rel": "item", "href": "/article/3" },
      { "rel": "item", "href": "/article/4" },
      { "rel": "item", "href": "/article/5" }
   ]
   "total" : 5,
}
]]></artwork></figure>

<t>A “Prefer-Push”-enabled client knows it will want to receive the full
representations of all articles. When the client receives the list of
articles via a “GET” request, it can indicate this preference with
the “Prefer-Push” header:</t>

<figure><artwork><![CDATA[
GET /article HTTP/1.1
Accept: application/vnd.example.links+json
Prefer-Push: item
]]></artwork></figure>

<t>Upon recieving this request, server may immediately generate the request
and response pairs for every “item” link in the collection and initiate
push streams for each.</t>

</section>
<section anchor="changelog" title="Changelog">

<section anchor="changes-since-00" title="Changes since -00">

<t><list style="symbols">
  <t>Added an abstract</t>
  <t>Updated rationale section significantly.</t>
</list></t>

</section>
</section>


  </back>

<!-- ##markdown-source:
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

-->

</rfc>

